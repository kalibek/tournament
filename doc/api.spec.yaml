openapi: 3.0.3
info:
  title: Tournament API
  description: Table tennis tournament API
  version: 1.0.0
servers:
  - url: 'http://localhost:8080/api/v1.0.0'
    description: Tournament api (local)
  - url: 'http://dev.tournament.api/api/v1.0.0'
    description: Tournament api (dev)
components:
  parameters:
    playerId:
      name: playerId
      in: path
      required: true
      schema:
        type: integer
        format: int64
    seriesId:
      name: seriesId
      in: path
      required: true
      schema:
        type: integer
        format: int64
    tournamentId:
      name: tournamentId
      in: path
      required: true
      schema:
        type: integer
        format: int64
    groupId:
      name: groupId
      in: path
      required: true
      schema:
        type: integer
        format: int64
    matchId:
      name: matchId
      in: path
      required: true
      schema:
        type: integer
        format: int64

    offset:
      description: Pagination parameter for list operations
      name: offset
      in: query
      required: false
      schema:
        type: integer
    limit:
      description: Pagination parameter for list operations
      name: limit
      in: query
      required: false
      schema:
        type: integer
    sortBy:
      description: Order by field parameter for list operations
      name: sortBy
      in: query
      required: false
      schema:
        type: string
    sortOrder:
      description: Sort by ASC|DESC parameter for list operations
      name: sortOrder
      in: query
      required: false
      schema:
        type: string
        enum:
          - ASC
          - DESC


  schemas:
    CommonResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time

    PlayerRequest:
      type: object
      properties:
        name:
          type: string
        rating:
          type: integer
    PlayerResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommonResponse"
        - $ref: "#/components/schemas/PlayerRequest"

    SeriesRequest:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
          enum:
            - draft
            - in_progress
            - done
    SeriesResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommonResponse"
        - $ref: "#/components/schemas/SeriesRequest"

    TournamentRequest:
      type: object
      allOf:
        - $ref: "#/components/schemas/SeriesRequest"
      properties:
        seriesId:
          type: integer
          format: int64
        runDate:
          type: string
          format: date-time
    TournamentResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommonResponse"
        - $ref: "#/components/schemas/TournamentRequest"

    GroupRequest:
      type: object
      allOf:
        - $ref: "#/components/schemas/SeriesRequest"
      properties:
        tournamentId:
          type: integer
          format: int64
        runDate:
          type: string
          format: date-time
        position:
          type: integer

    GroupResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommonResponse"
        - $ref: "#/components/schemas/GroupRequest"

    GroupPlayerResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommonResponse"
      properties:
        groupId:
          type: integer
          format: int64
        playerId:
          type: integer
          format: int64
        playerName:
          type: string
        playerRating:
          type: integer
        startingPosition:
          type: integer
        score:
          type: integer
        place:
          type: integer

    MatchRequest:
      type: object
      properties:
        status:
          type: string
          enum:
            - DRAFT
            - IN_PROGRESS
            - DONE
        groupId:
          type: integer
          format: int64
        playerId1:
          type: integer
          format: int64
        playerId2:
          type: integer
          format: int64
        playerResult1:
          type: integer
        playerResult2:
          type: integer
    MatchResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/CommonResponse"
        - $ref: "#/components/schemas/MatchRequest"


  examples:
    ExamplePlayerListResponse:
      description: List of all players
      value:
        - id: 1
          name: test player
          rating: 1200
          created: 2021-09-28T08:00:00.000Z
          updated: 2021-09-28T08:00:00.000Z
        - id: 2
          name: test player 2
          rating: 1200
          created: 2021-09-28T08:00:00.000Z
          updated: 2021-09-28T08:00:00.000Z
    ExamplePlayerResponse:
      description: Player created
      value:
        id: 1
        name: test player
        rating: 1200
        created: 2021-09-28T08:00:00.000Z
        updated: 2021-09-28T08:00:00.000Z

    ExampleSeriesListResponse:
      description: List of all series
      value:
        - id: 1
          name: test series
          status: DRAFT
          created: 2021-09-28T08:00:00.000Z
          updated: 2021-09-28T08:00:00.000Z
        - id: 2
          name: test series 2
          created: 2021-09-28T08:00:00.000Z
          status: DRAFT
          updated: 2021-09-28T08:00:00.000Z
    ExampleSeriesResponse:
      description: Series created
      value:
        id: 1
        name: test series
        status: DRAFT
        created: 2021-09-28T08:00:00.000Z
        updated: 2021-09-28T08:00:00.000Z

    ExampleTournamentListResponse:
      description: List of all tournament
      value:
        - id: 1
          seriesId: 1
          runDate: 2021-09-28T08:00:00.000Z
          name: test tournament
          status: DRAFT
          created: 2021-09-28T08:00:00.000Z
          updated: 2021-09-28T08:00:00.000Z
        - id: 2
          seriesId: 1
          runDate: 2021-09-28T08:00:00.000Z
          name: test tournament 2
          status: DRAFT
          created: 2021-09-28T08:00:00.000Z
          updated: 2021-09-28T08:00:00.000Z
    ExampleTournamentResponse:
      description: Tournament created
      value:
        id: 1
        seriesId: 1
        runDate: 2021-09-28T08:00:00.000Z
        name: test tournament
        status: DRAFT
        created: 2021-09-28T08:00:00.000Z
        updated: 2021-09-28T08:00:00.000Z

    ExampleGroupListResponse:
      description: List of all group
      value:
        - id: 1
          tournamentId: 1
          runDate: 2021-09-28T08:00:00.000Z
          position: 1
          status: DRAFT
          name: test group
          created: 2021-09-28T08:00:00.000Z
          updated: 2021-09-28T08:00:00.000Z
        - id: 2
          tournamentId: 1
          runDate: 2021-09-28T08:00:00.000Z
          position: 1
          status: DRAFT
          name: test group 2
          created: 2021-09-28T08:00:00.000Z
          updated: 2021-09-28T08:00:00.000Z
    ExampleGroupResponse:
      description: Group created
      value:
        id: 1
        tournamentId: 1
        runDate: 2021-09-28T08:00:00.000Z
        position: 1
        status: DRAFT
        name: test group
        created: 2021-09-28T08:00:00.000Z
        updated: 2021-09-28T08:00:00.000Z

    ExampleMatchListResponse:
      description: List of all match
      value:
        - id: 1
          groupId: 1
          groupPlayerId1: 1
          groupPlayerId2: 2
          playerResult1: 0
          playerResult2: 0
          created: 2021-09-28T08:00:00.000Z
          updated: 2021-09-28T08:00:00.000Z
        - id: 2
          groupId: 1
          groupPlayerId1: 1
          groupPlayerId2: 2
          playerResult1: 0
          playerResult2: 0
          created: 2021-09-28T08:00:00.000Z
          updated: 2021-09-28T08:00:00.000Z
    ExampleMatchResponse:
      description: Match created
      value:
        id: 1
        groupId: 1
        groupPlayerId1: 1
        groupPlayerId2: 2
        playerResult1: 0
        playerResult2: 0
        status: DRAFT
        created: 2021-09-28T08:00:00.000Z
        updated: 2021-09-28T08:00:00.000Z

    ExampleGroupPlayerResponse:
      description: Group seeding created
      value:
        id: 1
        groupId: 1
        playerId: 1
        startingPosition: 1
        created: 2021-09-28T08:00:00.000Z
        updated: 2021-09-28T08:00:00.000Z
    ExampleGroupPlayerListResponse:
      description: Group seeding created
      value:
        - id: 1
          groupId: 1
          playerId: 1
          startingPosition: 1
          created: 2021-09-28T08:00:00.000Z
          updated: 2021-09-28T08:00:00.000Z
        - id: 2
          groupId: 1
          playerId: 2
          startingPosition: 2
          created: 2021-09-28T08:00:00.000Z
          updated: 2021-09-28T08:00:00.000Z
paths:
  ########################
  # player api
  ########################
  /players:
    get:
      tags:
        - player
      operationId: listPlayers
      parameters:
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/sortBy"
        - $ref: "#/components/parameters/sortOrder"
      description: List all player
      responses:
        '200':
          description: Successful response
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlayerResponse"
              examples:
                response:
                  $ref: "#/components/examples/ExamplePlayerListResponse"
    post:
      tags:
        - player
      operationId: createPlayer
      description: Create new player
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/PlayerRequest"
      responses:
        '201':
          description: Created response
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/PlayerResponse"
              examples:
                response:
                  $ref: "#/components/examples/ExamplePlayerResponse"
  /players/{playerId}:
    parameters:
      - $ref: "#/components/parameters/playerId"
    get:
      tags:
        - player
      operationId: getPlayer
      description: Get single player

      responses:
        '200':
          description: Ok response
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/PlayerRequest"
    put:
      tags:
        - player
      operationId: updatePlayer
      description: Update single player
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/PlayerRequest"
      responses:
        '200':
          description: Ok response
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/PlayerResponse"
              examples:
                response:
                  $ref: "#/components/examples/ExamplePlayerResponse"
    delete:
      tags:
        - player
      operationId: deletePlayer
      description: Remove player
      responses:
        '200':
          description: Ok response
        '404':
          description: Not Found
        '403':
          description: Forbidden

  ########################
  # series api
  ########################
  /series:
    get:
      tags:
        - series
      operationId: listSeries
      parameters:
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/sortBy"
        - $ref: "#/components/parameters/sortOrder"
      description: List all series
      responses:
        '200':
          description: Successful response
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SeriesResponse"
              examples:
                response:
                  $ref: "#/components/examples/ExampleSeriesListResponse"
    post:
      tags:
        - series
      operationId: createSeries
      description: Create new series
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/SeriesRequest"
      responses:
        '201':
          description: Created response
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/SeriesResponse"
              examples:
                response:
                  $ref: "#/components/examples/ExampleSeriesResponse"
  /series/{seriesId}:
    parameters:
      - $ref: "#/components/parameters/seriesId"
    get:
      tags:
        - series
      operationId: getSeries
      description: Get single series

      responses:
        '200':
          description: Ok response
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/SeriesResponse"
    put:
      tags:
        - series
      operationId: updateSeries
      description: Update single series
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/SeriesRequest"
      responses:
        '200':
          description: Ok response
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/SeriesResponse"
              examples:
                response:
                  $ref: "#/components/examples/ExampleSeriesResponse"
    delete:
      tags:
        - series
      operationId: deleteSeries
      description: Remove series
      responses:
        '200':
          description: Ok response
        '404':
          description: Not Found
        '403':
          description: Forbidden

  ########################
  # tournament api
  ########################
  /series/{seriesId}/tournaments:
    get:
      tags:
        - series
      operationId: listTournaments
      parameters:
        - $ref: "#/components/parameters/seriesId"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/sortBy"
        - $ref: "#/components/parameters/sortOrder"
      description: List all series
      responses:
        '200':
          description: Successful response
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TournamentResponse"
              examples:
                response:
                  $ref: "#/components/examples/ExampleTournamentListResponse"
    post:
      tags:
        - series
      operationId: createTournament
      parameters:
        - $ref: "#/components/parameters/seriesId"
      description: Create new series
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/TournamentRequest"
      responses:
        '201':
          description: Created response
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/TournamentResponse"
              examples:
                response:
                  $ref: "#/components/examples/ExampleTournamentResponse"
  /tournaments/{tournamentId}:
    parameters:
      - $ref: "#/components/parameters/tournamentId"
    get:
      tags:
        - tournaments
      operationId: getTournament
      description: Get single series

      responses:
        '200':
          description: Ok response
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/TournamentResponse"
    put:
      tags:
        - tournaments
      operationId: updateTournament
      description: Update single series
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/TournamentRequest"
      responses:
        '200':
          description: Ok response
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/TournamentResponse"
              examples:
                response:
                  $ref: "#/components/examples/ExampleTournamentResponse"
    delete:
      tags:
        - tournaments
      operationId: deleteTournament
      description: Remove series
      responses:
        '200':
          description: Ok response
        '404':
          description: Not Found
        '403':
          description: Forbidden

  ########################
  # group api
  ########################
  /tournaments/{tournamentId}/groups:
    get:
      tags:
        - tournaments
      operationId: listGroups
      parameters:
        - $ref: "#/components/parameters/tournamentId"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/sortBy"
        - $ref: "#/components/parameters/sortOrder"
      description: List all series
      responses:
        '200':
          description: Successful response
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GroupResponse"
              examples:
                response:
                  $ref: "#/components/examples/ExampleGroupListResponse"
    post:
      tags:
        - tournaments
      operationId: createGroup
      parameters:
        - $ref: "#/components/parameters/tournamentId"
      description: Create new series
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/GroupRequest"
      responses:
        '201':
          description: Created response
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/GroupResponse"
              examples:
                response:
                  $ref: "#/components/examples/ExampleGroupResponse"
  /groups/{groupId}:
    parameters:
      - $ref: "#/components/parameters/groupId"
    get:
      tags:
        - groups
      operationId: getGroup
      description: Get single series

      responses:
        '200':
          description: Ok response
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/GroupResponse"
    put:
      tags:
        - groups
      operationId: updateGroup
      description: Update single series
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/GroupRequest"
      responses:
        '200':
          description: Ok response
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/GroupResponse"
              examples:
                response:
                  $ref: "#/components/examples/ExampleGroupResponse"
    delete:
      tags:
        - groups
      operationId: deleteGroup
      description: Remove series
      responses:
        '200':
          description: Ok response
        '404':
          description: Not Found
        '403':
          description: Forbidden

  ########################
  # match api
  ########################
  /groups/{groupId}/matches:
    get:
      tags:
        - groups
      operationId: listMatches
      parameters:
        - $ref: "#/components/parameters/groupId"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/sortBy"
        - $ref: "#/components/parameters/sortOrder"
      description: List all matches in group
      responses:
        '200':
          description: Successful response
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MatchResponse"
              examples:
                response:
                  $ref: "#/components/examples/ExampleMatchListResponse"
  /matches/{matchId}:
    parameters:
      - $ref: "#/components/parameters/matchId"
    get:
      tags:
        - matches
      operationId: getMatch
      description: Get single match

      responses:
        '200':
          description: Ok response
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/MatchResponse"
    put:
      tags:
        - matches
      operationId: updateMatch
      description: Update single match
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/MatchRequest"
      responses:
        '200':
          description: Ok response
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/MatchResponse"
              examples:
                response:
                  $ref: "#/components/examples/ExampleMatchResponse"

  ########################
  # seeding api
  ########################
  /groups/{groupId}/players:
    get:
      tags:
        - groups
      operationId: listGroupPlayers
      parameters:
        - $ref: "#/components/parameters/groupId"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/sortBy"
        - $ref: "#/components/parameters/sortOrder"
      description: List all player in group
      responses:
        '200':
          description: Successful response
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GroupPlayerResponse"
              examples:
                response:
                  $ref: "#/components/examples/ExampleGroupPlayerResponse"

  /groups/{groupId}/players/{playerId}/seedings:
    get:
      tags:
        - seeding
      operationId: getGroupPlayer
      parameters:
        - $ref: "#/components/parameters/groupId"
        - $ref: "#/components/parameters/playerId"
      description: get player of group
      responses:
        '200':
          description: Ok response
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/GroupPlayerResponse"
              examples:
                response:
                  $ref: "#/components/examples/ExampleGroupPlayerResponse"
    post:
      tags:
        - seeding
      operationId: addPlayerToGroup
      parameters:
        - $ref: "#/components/parameters/groupId"
        - $ref: "#/components/parameters/playerId"
      description: add player to group
      responses:
        '201':
          description: Ok response
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/GroupPlayerResponse"
              examples:
                response:
                  $ref: "#/components/examples/ExampleGroupPlayerResponse"
    delete:
      tags:
        - seeding
      operationId: deletePlayerFromGroup
      parameters:
        - $ref: "#/components/parameters/groupId"
        - $ref: "#/components/parameters/playerId"
      description: Remove series
      responses:
        '200':
          description: Ok response
        '404':
          description: Not Found
        '403':
          description: Forbidden